/*
 * Wazuh databaseFeedManager
 * Copyright (C) 2015, Wazuh Inc.
 * September 22, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#include "databaseFeedManager_test.h"
#include "MockContentRegister.hpp"
#include "MockIndexerConnector.hpp"
#include "MockOsDataCache.hpp"
#include "MockPolicyManager.hpp"
#include "MockRouterSubscriber.hpp"
#include "MockUnixSocketRequest.hpp"
#include "TrampolineContentRegister.hpp"
#include "TrampolineIndexerConnector.hpp"
#include "TrampolineOsDataCache.hpp"
#include "TrampolinePolicyManager.hpp"
#include "TrampolineRouterSuscribe.hpp"
#include "flatbuffers/flatbuffer_builder.h"
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/idl.h"
#include "routerModule.hpp"
#include "routerProvider.hpp"
#include <atomic>
#include <filesystem>
#include <string_view>

using ::testing::_;
using ::testing::Return;

constexpr auto COMMON_DATABASE_DIR {"queue/vd"}; //<<Used for all databases

constexpr auto CVEID_TEST_OK {"cveid_test_ok"};
constexpr auto CVEID_TEST_NOT_FOUND {"cveid_test_not_found"};
constexpr auto CVEID_TEST_CORRUPTED {"cveid_test_corrupted"};
const std::string FLATBUFFER_SCHEMA {FLATBUFFER_SCHEMAS_DIR "/vulnerabilityCandidate.fbs"};

// Variables used for candidate tests
const std::string VULNERABILITY_CANDIDATE_EXAMPLE = R"(
[
    {
        "candidates": [
            {
                "cveId": "CVE-1999-1234",
                "defaultStatus": "unaffected",
                "platforms": [
                    "ubuntu"
                ],
                "versions": [
                    {
                        "status": "affected",
                        "version": "1.0.2"
                    },
                    {
                        "lessThan": "1.1.5-1",
                        "status": "affected",
                        "version": "0",
                        "versionType": "deb"
                    },
                    {
                        "lessThan": "*",
                        "status": "affected",
                        "version": "0",
                        "versionType": "custom"
                    }
                ]
            }
        ]
    },
    {
        "candidates": [
            {
                "cveId": "CVE-1999-1235",
                "defaultStatus": "unaffected",
                "platforms": [
                    "ubuntu"
                ],
                "versions": [
                    {
                        "status": "affected",
                        "version": "1.0.2"
                    },
                    {
                        "lessThan": "1.1.5-1",
                        "status": "affected",
                        "version": "0",
                        "versionType": "deb"
                    },
                    {
                        "lessThan": "*",
                        "status": "affected",
                        "version": "0",
                        "versionType": "custom"
                    }
                ]
            }
        ]
    }
]
)";

const std::string CNA_NAME {"cnaName"};
const std::string PACKAGE_NAME {"libmagic-mgc"};
const std::string CORRUPTED_PACKAGE_NAME {"libcorrupted"};

// External shared pointers definitions
std::shared_ptr<MockIndexerConnector> spIndexerConnectorMock;
std::shared_ptr<MockPolicyManager> spPolicyManagerMock;
std::shared_ptr<MockContentRegister> spContentRegisterMock;
std::shared_ptr<MockRouterSubscriber> spRouterSubscriberMock;

void DatabaseFeedManagerTest::SetUp()
{
    std::filesystem::create_directories(COMMON_DATABASE_DIR);

    std::string schemaStr;
    nlohmann::json jsonExample = nlohmann::json::parse(VULNERABILITY_CANDIDATE_EXAMPLE);

    bool valid = flatbuffers::LoadFile(FLATBUFFER_SCHEMA.c_str(), false, &schemaStr);
    assert(valid == true);
    assert(!jsonExample.empty());

    flatbuffers::Parser parser;
    valid = parser.Parse(schemaStr.c_str());
    assert(valid == true);

    Utils::RocksDBWrapper rocksDBWrapper(DATABASE_PATH);

    for (const auto& item : jsonExample)
    {
        valid = parser.Parse(item.dump().c_str());
        assert(valid == true);

        uint8_t* buf = parser.builder_.GetBufferPointer();
        const size_t flatbufferSize = parser.builder_.GetSize();

        const rocksdb::Slice vulnerabilityCandidate(reinterpret_cast<const char*>(buf), flatbufferSize);

        if (!rocksDBWrapper.columnExists(CNA_NAME))
        {
            rocksDBWrapper.createColumn(CNA_NAME);
        }
        rocksDBWrapper.put(PACKAGE_NAME + "_" + item.at("candidates").at(0).at("cveId").get<std::string>(),
                           vulnerabilityCandidate,
                           CNA_NAME);
    }
};

void DatabaseFeedManagerTest::TearDown()
{
    // Reset shared_ptr owner
    spIndexerConnectorMock.reset();
    spPolicyManagerMock.reset();
    spContentRegisterMock.reset();
    spRouterSubscriberMock.reset();
    std::filesystem::remove_all(COMMON_DATABASE_DIR);
};

TEST_F(DatabaseFeedManagerTest, getVulnerabiltyDescriptiveInformation_Ok)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    flatbuffers::FlatBufferBuilder fbBuilder;
    auto vdOriginalData = NSVulnerabilityScanner::CreateVulnerabilityDescriptionDirect(fbBuilder,
                                                                                       "AccessComplexityStr",
                                                                                       "AssignerStr",
                                                                                       "AttackVectorStr",
                                                                                       "AuthenticationStr",
                                                                                       "AvailabilityStr",
                                                                                       "ClassificationStr",
                                                                                       "ConfidentialityImpactStr",
                                                                                       "CWEIdStr",
                                                                                       "DataPublishedStr",
                                                                                       "DataUpdatedStr",
                                                                                       "DescriptionStr",
                                                                                       "IntegrityImpactStr",
                                                                                       "PrivilegesRequiredStr",
                                                                                       "ReferenceStr",
                                                                                       "ScopeStr",
                                                                                       999.99,
                                                                                       "ScoreVersionStr",
                                                                                       "SeverityStr",
                                                                                       "UserInteractionStr");

    fbBuilder.Finish(vdOriginalData);

    {
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(fbBuilder.GetBufferPointer()), fbBuilder.GetSize());
        if (!dbWrapper->columnExists(DESCRIPTIONS_COLUMN))
        {
            dbWrapper->createColumn(DESCRIPTIONS_COLUMN);
        }
        dbWrapper->put(CVEID_TEST_OK, dbValue, DESCRIPTIONS_COLUMN);
    }

    auto spTrampolineIndexerConnector = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                                      TrampolinePolicyManager,
                                                                      TrampolineContentRegister,
                                                                      TrampolineRouterSubscriber>>(
        spTrampolineIndexerConnector, shouldStop, mutex)};

    FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> container;

    EXPECT_NO_THROW(spDatabaseFeedManager->getVulnerabiltyDescriptiveInformation(CVEID_TEST_OK, container));
    EXPECT_STREQ(container.data->accessComplexity()->c_str(), "AccessComplexityStr");
    EXPECT_STREQ(container.data->assignerShortName()->c_str(), "AssignerStr");
    EXPECT_STREQ(container.data->attackVector()->c_str(), "AttackVectorStr");
    EXPECT_STREQ(container.data->authentication()->c_str(), "AuthenticationStr");
    EXPECT_STREQ(container.data->availabilityImpact()->c_str(), "AvailabilityStr");
    EXPECT_STREQ(container.data->classification()->c_str(), "ClassificationStr");
    EXPECT_STREQ(container.data->confidentialityImpact()->c_str(), "ConfidentialityImpactStr");
    EXPECT_STREQ(container.data->cweId()->c_str(), "CWEIdStr");
    EXPECT_STREQ(container.data->datePublished()->c_str(), "DataPublishedStr");
    EXPECT_STREQ(container.data->dateUpdated()->c_str(), "DataUpdatedStr");
    EXPECT_STREQ(container.data->description()->c_str(), "DescriptionStr");
    EXPECT_STREQ(container.data->integrityImpact()->c_str(), "IntegrityImpactStr");
    EXPECT_STREQ(container.data->privilegesRequired()->c_str(), "PrivilegesRequiredStr");
    EXPECT_STREQ(container.data->reference()->c_str(), "ReferenceStr");
    EXPECT_STREQ(container.data->scope()->c_str(), "ScopeStr");
    EXPECT_FLOAT_EQ(container.data->scoreBase(), 999.99);
    EXPECT_STREQ(container.data->scoreVersion()->c_str(), "ScoreVersionStr");
    EXPECT_STREQ(container.data->severity()->c_str(), "SeverityStr");
    EXPECT_STREQ(container.data->userInteraction()->c_str(), "UserInteractionStr");
}

TEST_F(DatabaseFeedManagerTest, getVulnerabiltyDescriptiveInformation_NotFound)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    flatbuffers::FlatBufferBuilder fbBuilder;
    auto vdOriginalData = NSVulnerabilityScanner::CreateVulnerabilityDescriptionDirect(fbBuilder,
                                                                                       "AccessComplexityStr",
                                                                                       "AssignerStr",
                                                                                       "AttackVectorStr",
                                                                                       "AuthenticationStr",
                                                                                       "AvailabilityStr",
                                                                                       "ClassificationStr",
                                                                                       "ConfidentialityImpactStr",
                                                                                       "CWEIdStr",
                                                                                       "DataPublishedStr",
                                                                                       "DataUpdatedStr",
                                                                                       "DescriptionStr",
                                                                                       "IntegrityImpactStr",
                                                                                       "PrivilegesRequiredStr",
                                                                                       "ReferenceStr",
                                                                                       "ScopeStr",
                                                                                       999.99,
                                                                                       "ScoreVersionStr",
                                                                                       "SeverityStr",
                                                                                       "UserInteractionStr");
    fbBuilder.Finish(vdOriginalData);

    {
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(fbBuilder.GetBufferPointer()), fbBuilder.GetSize());
        if (!dbWrapper->columnExists(DESCRIPTIONS_COLUMN))
        {
            dbWrapper->createColumn(DESCRIPTIONS_COLUMN);
        }
        dbWrapper->put(CVEID_TEST_NOT_FOUND, dbValue, DESCRIPTIONS_COLUMN);
    }

    auto spTrampolineIndexerConnector = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                                      TrampolinePolicyManager,
                                                                      TrampolineContentRegister,
                                                                      TrampolineRouterSubscriber>>(
        spTrampolineIndexerConnector, shouldStop, mutex)};

    FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> container;

    EXPECT_THROW(spDatabaseFeedManager->getVulnerabiltyDescriptiveInformation("cveid_any", container),
                 std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, getVulnerabiltyDescriptiveInformation_Corrupted)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    {
        uint8_t corruptedData[] = {
            0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF};
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(corruptedData), sizeof(corruptedData));
        if (!dbWrapper->columnExists(DESCRIPTIONS_COLUMN))
        {
            dbWrapper->createColumn(DESCRIPTIONS_COLUMN);
        }
        dbWrapper->put(CVEID_TEST_CORRUPTED, dbValue, DESCRIPTIONS_COLUMN);
    }

    auto spTrampolineIndexerConnector = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                                      TrampolinePolicyManager,
                                                                      TrampolineContentRegister,
                                                                      TrampolineRouterSubscriber>>(
        spTrampolineIndexerConnector, shouldStop, mutex)};

    FlatbufferDataPair<NSVulnerabilityScanner::VulnerabilityDescription> container;

    EXPECT_THROW(spDatabaseFeedManager->getVulnerabiltyDescriptiveInformation(CVEID_TEST_CORRUPTED, container),
                 std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, DISABLED_GetVulnerabilityCandidatesSuccess)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto pIndexerConnectorTrap = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto pDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(pIndexerConnectorTrap, shouldStop, mutex)};

    std::vector<std::string> cves;

    pDatabaseFeedManager->getVulnerabilitiesCandidates(
        CNA_NAME,
        PACKAGE_NAME,
        [&](const std::string& cnaName, const NSVulnerabilityScanner::ScanVulnerabilityCandidate& candidate) -> bool
        {
            auto cveId = candidate.cveId()->str();
            cves.push_back(cveId);
            EXPECT_STREQ(cnaName.c_str(), CNA_NAME.c_str());
            return false;
        });

    EXPECT_EQ(cves.size(), 2);
    EXPECT_EQ(cves[0], "CVE-1999-1234");
    EXPECT_EQ(cves[1], "CVE-1999-1235");
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityCandidatesCorrupted)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto pIndexerConnectorTrap = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    // Simulate corrupted data stored
    {
        uint8_t corruptedData[] = {
            0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF};
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(corruptedData), sizeof(corruptedData));
        dbWrapper->put(std::string(CORRUPTED_PACKAGE_NAME) + "_CVE-2023-7845", dbValue, CNA_NAME);
    }

    auto pDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(pIndexerConnectorTrap, shouldStop, mutex)};

    EXPECT_THROW(
        {
            pDatabaseFeedManager->getVulnerabilitiesCandidates(
                CNA_NAME,
                CORRUPTED_PACKAGE_NAME,
                [&](const std::string& cnaName,
                    const NSVulnerabilityScanner::ScanVulnerabilityCandidate& candidate) -> bool { return true; });
        },
        std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityCandidatesNoPackageName)
{
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto pIndexerConnectorTrap = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto pDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(pIndexerConnectorTrap, shouldStop, mutex)};

    EXPECT_ANY_THROW({
        pDatabaseFeedManager->getVulnerabilitiesCandidates(
            CNA_NAME,
            "",
            [&](const std::string& cnaName, const NSVulnerabilityScanner::ScanVulnerabilityCandidate& candidate) -> bool
            { return true; });
    });
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityRemediation_ValidData)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate saved data, store before variable instance.
    {
        std::string key_dummy {"CVE-2023-2609"};
        flatbuffers::FlatBufferBuilder builder;
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);

        std::vector<flatbuffers::Offset<flatbuffers::String>> updates_vec;
        updates_vec.push_back(builder.CreateString("KB2023"));
        auto updates = builder.CreateVector(updates_vec);
        auto dummy = CreateRemediationInfo(builder, updates);
        builder.Finish(dummy);

        rocksdb::Slice value(reinterpret_cast<const char*>(builder.GetBufferPointer()), builder.GetSize());

        if (!dbWrapper->columnExists(REMEDIATIONS_COLUMN))
        {
            dbWrapper->createColumn(REMEDIATIONS_COLUMN);
        }
        dbWrapper->put(key_dummy, value, REMEDIATIONS_COLUMN);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string cveId {"CVE-2023-2609"};
    FlatbufferDataPair<RemediationInfo> dtoVulnRemediation;

    // Asserts
    ASSERT_NO_THROW(spDatabaseFeedManager->getVulnerabilityRemediation(cveId, dtoVulnRemediation));
    ASSERT_STREQ(dtoVulnRemediation.data->updates()->Get(0)->str().c_str(), "KB2023");
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityRemediation_DataNotFound)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string cveId {"CVE-2023-5678"};
    FlatbufferDataPair<RemediationInfo> dtoVulnRemediation;

    // Assert
    ASSERT_THROW(spDatabaseFeedManager->getVulnerabilityRemediation(cveId, dtoVulnRemediation), std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, GetVulnerabilityRemediation_InvalidData)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate corrupted data, store before variable instance.
    {
        uint8_t corruptedData[] = {
            0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF};
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(corruptedData), sizeof(corruptedData));
        dbWrapper->put("CVE-2023-2609", dbValue);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string cveId {"CVE-2023-2609"};
    FlatbufferDataPair<RemediationInfo> dtoVulnRemediation;

    // Assert
    ASSERT_THROW(spDatabaseFeedManager->getVulnerabilityRemediation(cveId, dtoVulnRemediation), std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, DISABLED_PackageTranslationCacheMiss)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate saved data, store before variable instance.
    {
        std::string idDummy {"WT_001"};
        flatbuffers::FlatBufferBuilder builder;
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        auto source = CreateSourceFieldsDirect(builder, "^The Apache Software", "^Apache Tomcat.*", "");
        auto translation = CreateTranslationFieldsDirect(builder, "apache", "tomcat", "");
        std::vector<flatbuffers::Offset<TranslationFields>> translations_vector;
        std::vector<int8_t> actions_vector;
        translations_vector.push_back(translation);
        actions_vector.push_back(Action_replace_product);
        auto data = CreateTranslationEntryDirect(builder, &actions_vector, source, "windows", &translations_vector);
        builder.Finish(data);
        rocksdb::Slice value(reinterpret_cast<const char*>(builder.GetBufferPointer()), builder.GetSize());
        dbWrapper->put(idDummy, value);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string packageName {"Apache Tomcat.GenericVersion"};
    std::map<std::string, std::string> translations;

    spDatabaseFeedManager->getWazuhPackageTranslation(
        packageName,
        [&translations](const NSVulnerabilityScanner::TranslationEntry& translation)
        {
            for (auto index = 0u; index < translation.translation()->size(); index++)
            {
                for (auto indexAct = 0u; indexAct < translation.action()->size(); indexAct++)
                {
                    switch (translation.action()->Get(indexAct))
                    {
                        case Action_replace_product:
                        {
                            translations.insert({translation.source()->product()->str(),
                                                 translation.translation()->Get(index)->product()->str()});
                            break;
                        }
                        case Action_replace_vendor:
                        {
                            translations.insert({translation.source()->vendor()->str(),
                                                 translation.translation()->Get(index)->vendor()->str()});
                            break;
                        }
                    }
                }
            }
        });
    // Assert
    EXPECT_EQ(translations.size(), 1);
    auto it = translations.begin();
    EXPECT_EQ(it->first, "^Apache Tomcat.*");
    EXPECT_EQ(it->second, "tomcat");
}

TEST_F(DatabaseFeedManagerTest, DISABLED_PackageTranslationCacheHit)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate saved data, store before variable instance.
    {
        std::string idDummy {"WT_001"};
        flatbuffers::FlatBufferBuilder builder;
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        auto source = CreateSourceFieldsDirect(builder, "^The Apache Software", "^Apache Tomcat.*", "");
        auto translation = CreateTranslationFieldsDirect(builder, "apache", "tomcat", "");
        std::vector<flatbuffers::Offset<TranslationFields>> translations_vector;
        std::vector<int8_t> actions_vector;
        translations_vector.push_back(translation);
        actions_vector.push_back(Action_replace_product);
        auto data = CreateTranslationEntryDirect(builder, &actions_vector, source, "windows", &translations_vector);
        builder.Finish(data);
        rocksdb::Slice value(reinterpret_cast<const char*>(builder.GetBufferPointer()), builder.GetSize());
        dbWrapper->put(idDummy, value);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string packageName {"Apache Tomcat.GenericVersion"};
    std::map<std::string, std::string> translations;

    spDatabaseFeedManager->getWazuhPackageTranslation(
        packageName,
        [&translations](const NSVulnerabilityScanner::TranslationEntry& translation)
        {
            for (auto index = 0u; index < translation.translation()->size(); index++)
            {
                for (auto indexAct = 0u; indexAct < translation.action()->size(); indexAct++)
                {
                    switch (translation.action()->Get(indexAct))
                    {
                        case Action_replace_product:
                        {
                            translations.insert({translation.source()->product()->str(),
                                                 translation.translation()->Get(index)->product()->str()});
                            break;
                        }
                        case Action_replace_vendor:
                        {
                            translations.insert({translation.source()->vendor()->str(),
                                                 translation.translation()->Get(index)->vendor()->str()});
                            break;
                        }
                    }
                }
            }
        });

    spDatabaseFeedManager->getWazuhPackageTranslation(
        packageName,
        [&translations](const NSVulnerabilityScanner::TranslationEntry& translation)
        {
            for (auto index = 0u; index < translation.translation()->size(); index++)
            {
                for (auto indexAct = 0u; indexAct < translation.action()->size(); indexAct++)
                {
                    switch (translation.action()->Get(indexAct))
                    {
                        case Action_replace_product:
                        {
                            translations.insert({translation.source()->product()->str(),
                                                 translation.translation()->Get(index)->product()->str()});
                            break;
                        }
                        case Action_replace_vendor:
                        {
                            translations.insert({translation.source()->vendor()->str(),
                                                 translation.translation()->Get(index)->vendor()->str()});
                            break;
                        }
                    }
                }
            }
        });
    // Assert
    EXPECT_EQ(translations.size(), 1);
    auto it = translations.begin();
    EXPECT_EQ(it->first, "^Apache Tomcat.*");
    EXPECT_EQ(it->second, "tomcat");
}

TEST_F(DatabaseFeedManagerTest, DISABLED_PackageTranslationNoTranslationFound)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate saved data, store before variable instance.
    {
        std::string idDummy {"WT_001"};
        flatbuffers::FlatBufferBuilder builder;
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        auto source = CreateSourceFieldsDirect(builder, "^The Apache Software", "^Apache Tomcat.*", "");
        auto translation = CreateTranslationFieldsDirect(builder, "apache", "tomcat", "");
        std::vector<flatbuffers::Offset<TranslationFields>> translations_vector;
        std::vector<int8_t> actions_vector;
        translations_vector.push_back(translation);
        actions_vector.push_back(Action_replace_product);
        auto data = CreateTranslationEntryDirect(builder, &actions_vector, source, "windows", &translations_vector);
        builder.Finish(data);
        rocksdb::Slice value(reinterpret_cast<const char*>(builder.GetBufferPointer()), builder.GetSize());
        dbWrapper->put(idDummy, value);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string packageName {"SQLite3"};
    std::map<std::string, std::string> translations;

    spDatabaseFeedManager->getWazuhPackageTranslation(
        packageName,
        [&translations](const NSVulnerabilityScanner::TranslationEntry& translation)
        {
            for (auto index = 0u; index < translation.translation()->size(); index++)
            {
                for (auto indexAct = 0u; indexAct < translation.action()->size(); indexAct++)
                {
                    switch (translation.action()->Get(indexAct))
                    {
                        case Action_replace_product:
                        {
                            translations.insert({translation.source()->product()->str(),
                                                 translation.translation()->Get(index)->product()->str()});
                            break;
                        }
                        case Action_replace_vendor:
                        {
                            translations.insert({translation.source()->vendor()->str(),
                                                 translation.translation()->Get(index)->vendor()->str()});
                            break;
                        }
                    }
                }
            }
        });

    // Assert
    EXPECT_EQ(translations.size(), 0);
}

TEST_F(DatabaseFeedManagerTest, DISABLED_PackageTranslationInvalidDatabase)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    // Simulate corrupted data, store before variable instance.
    {
        uint8_t corruptedData[] = {
            0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF, 0x55, 0xCC, 0x00, 0xFF};
        auto dbWrapper = std::make_unique<Utils::RocksDBWrapper>(DATABASE_PATH);
        rocksdb::Slice dbValue(reinterpret_cast<const char*>(corruptedData), sizeof(corruptedData));
        dbWrapper->put("WT_001", dbValue);
    }

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // Variables setup
    std::string packageName {"Apache Tomcat.GenericVersion"};

    EXPECT_THROW(spDatabaseFeedManager->getWazuhPackageTranslation(
                     packageName, [](const NSVulnerabilityScanner::TranslationEntry& translation) {}),
                 std::runtime_error);
}

TEST_F(DatabaseFeedManagerTest, PackageTranslationInvalidCache)
{
    // ToDo It's necessary the write function to store a value corrupted and run this test.
}

void databaseFeedManagerTestGracefulShutdown()
{
    // Test setup
    nlohmann::json jsonFileContent;
    nlohmann::json jsonItem = R"(
        {
            "offset": 0,
            "type": "create",
            "version": 1,
            "context": "all_vendors_071123",
            "resource": "CVE-0000-0000",
            "payload": {
                "containers": {
                    "cna": {
                        "providerMetadata": {
                            "dateUpdated": "2017-05-11T14:29:20Z",
                            "orgId": "00000000-0000-4000-A000-000000000003",
                            "shortName": "nvd"
                        },
                        "rejectedReasons": [
                            {
                                "lang": "en",
                                "value": "** REJECT **"
                            }
                        ]
                    }
                },
                "cveMetadata": {
                    "assignerOrgId": "00000000-0000-4000-A000-000000000003",
                    "assignerShortName": "nvd",
                    "cveId": "CVE-0000-0000",
                    "datePublished": "2017-05-11T14:29:20Z",
                    "dateUpdated": "2017-05-11T14:29:20Z",
                    "state": "REJECTED"
                },
                "dataType": "CVE_RECORD",
                "dataVersion": "5.0"
            }
        }
    )"_json;
    int cveNumber = 1;
    for (auto itemNumber = 0; itemNumber < 1000; itemNumber++)
    {
        jsonItem["offset"] = 57001 + itemNumber;
        std::ostringstream itemCVEId;
        itemCVEId << "CVE-" << std::dec << std::setw(4) << std::setfill('0') << (std::rand() % 20 + 2000) << "-"
                  << std::dec << std::setw(4) << std::setfill('0') << itemNumber;
        jsonItem["resource"] = itemCVEId.str();
        jsonItem["payload"]["cveMetadata"]["cveId"] = itemCVEId.str();
        jsonFileContent["data"].push_back(jsonItem);
    }

    std::ofstream file {"GracefulShutdown.json"};
    file << jsonFileContent.dump();

    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();

    RouterModule::instance().start();
    auto routerProvider = std::make_shared<RouterProvider>(configurationParameters.at("topicName"));
    routerProvider->start();

    auto routerMessageJson = R"(
    {
        "type": "offsets",
        "offset": 57000,
        "paths":
        [
            "GracefulShutdown.json"
        ],
        "stageStatus":
        [
            {
                "stage": "download",
                "status": "ok"
            }
        ]
    }
    )"_json;

    const auto routerMessagePayload = routerMessageJson.dump();
    const auto routerMessage = std::vector<char>(routerMessagePayload.begin(), routerMessagePayload.end());
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    EXPECT_CALL(MockUnixSocketRequest::instance(), put(_, _, _, _)).Times(1);

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              RouterSubscriber,
                                              MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

    routerProvider->send(routerMessage);
    std::this_thread::sleep_for(std::chrono::seconds(1));
    spDatabaseFeedManager.reset();

    std::remove("GracefulShutdown.json");
}

TEST_F(DatabaseFeedManagerTest, GracefulShutdown)
{
    EXPECT_NO_THROW(databaseFeedManagerTestGracefulShutdown());
}

TEST_F(DatabaseFeedManagerTest, GetCNAName)
{
    // Test setup
    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    std::shared_ptr<MockIndexerConnector> pIndexerConnectorMock;

    spIndexerConnectorMock = std::make_shared<MockIndexerConnector>();

    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));

    spContentRegisterMock = std::make_shared<MockContentRegister>(
        configurationParameters.at("topicName").get<const std::string>(), configurationParameters);

    spRouterSubscriberMock = std::make_shared<MockRouterSubscriber>(
        configurationParameters.at("topicName").get<const std::string>(), "vulnerability_feed_manager");
    EXPECT_CALL(*spRouterSubscriberMock, subscribe(_));

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              TrampolineRouterSubscriber>>(spIndexerConnectorTramp, shouldStop, mutex)};

    // For ubuntu use mantainer name.
    EXPECT_STREQ(spDatabaseFeedManager->getCnaName("Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>").c_str(),
                 "canonical");
    // For debian use mantainer name.
    EXPECT_STREQ(spDatabaseFeedManager->getCnaName("Debian GCC Maintainers <debian-gcc@lists.debian.org>").c_str(),
                 "debian");

    // For redhat use mantainer name.
    EXPECT_STREQ(spDatabaseFeedManager->getCnaName("Red Hat, Inc. <loren@ipsum.com>").c_str(), "redhat");

    // For centos use mantainer name.
    EXPECT_STREQ(spDatabaseFeedManager->getCnaName("CentOS <lorem@ipsum.com>").c_str(), "redhat");

    // By default use NVD
    EXPECT_STREQ(spDatabaseFeedManager->getCnaName("loremIpsum").c_str(), "nvd");
}

/* DatabaseFeedManagerMessageProcessor tests */
/**
 * @brief SetUp.
 *
 */
void DatabaseFeedManagerMessageProcessorTest::SetUp()
{
    std::ofstream file1 {"file1.json"};
    file1 << R"({invalid:json})";

    std::ofstream file2 {"file2.json"};
    file2 << R"({"field":"value"})";

    std::ofstream file3 {"file3.json"};
    file3 << R"({"data": [{"element1":"element1","offset":1}]})";

    std::ofstream file4 {"file4.json"};
    file4 << R"({"name": "name_string"})";

    const auto configurationParameters = R"( {"topicName": "topicNameTest"} )"_json;
    spPolicyManagerMock = std::make_shared<MockPolicyManager>();
    EXPECT_CALL(*spPolicyManagerMock, getUpdaterConfiguration()).WillRepeatedly(Return(configurationParameters));
    EXPECT_CALL(*spPolicyManagerMock, getTranslationLRUSize()).WillRepeatedly(Return(2048));
};

/**
 * @brief TearDown.
 *
 */
void DatabaseFeedManagerMessageProcessorTest::TearDown()
{
    std::remove("file1.json");
    std::remove("file2.json");
    std::remove("file3.json");
    std::remove("file4.json");

    // Reset shared_ptr owner
    spIndexerConnectorMock.reset();
    spPolicyManagerMock.reset();
    spContentRegisterMock.reset();
    spRouterSubscriberMock.reset();
    std::filesystem::remove_all(COMMON_DATABASE_DIR);
};

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestInvalidJson)
{
    std::string stdMessage = R"({invalid_json})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid message");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestNoType)
{
    std::string stdMessage = R"({"field":"value","paths":["file1.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid message");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestInvalidType)
{
    std::string stdMessage = R"({"type":"invalid","offset":1234,"paths":["file1.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid message");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestNoPaths)
{
    std::string stdMessage = R"({"type":"offsets","offset":1234,"field":"value"})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid message");
    }
    catch (...)
    {
        FAIL() << "Expected std::runtime_error";
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestOffsetFileWithInvalidJson)
{
    std::string stdMessage = R"({"type":"offsets","offset":1234,"paths":["file1.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);

        FAIL() << "Expected parse_error exception";
    }
    catch (const nlohmann::detail::parse_error& e)
    {
        EXPECT_STREQ(e.what(),
                     "[json.exception.parse_error.101] parse error at line 1, column 2: syntax error while parsing "
                     "object key - invalid literal; last read: '{i'; expected string literal");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestOffsetFileWithNoData)
{
    std::string stdMessage = R"({"type":"offsets","offset":1234,"paths":["file2.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "The target array does not exist.");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestOffsetFileWithDataAndException)
{
    std::string stdMessage = R"({"type":"offsets","offset":1234,"paths":["file3.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper)
    {
        throw std::runtime_error {"Error"};
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Error");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestOffsetFileWithDataSuccess)
{
    std::string stdMessage = R"({"type":"offsets","offset":1234,"paths":["file3.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    EXPECT_CALL(MockUnixSocketRequest::instance(), put(_, _, _, _))
        .Times(1)
        .WillOnce(::testing::InvokeArgument<2>(std::string {"ok"}));

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              RouterSubscriber,
                                              MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

    EXPECT_NO_THROW(spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1));
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestOffsetFileWithDataSuccessButOffsetError)
{
    std::string stdMessage = R"({"type":"offsets","offset":1234,"paths":["file3.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    EXPECT_CALL(MockUnixSocketRequest::instance(), put(_, _, _, _))
        .Times(1)
        .WillOnce(::testing::InvokeArgument<3>(std::string {"Error"}, 400));

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              RouterSubscriber,
                                              MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

    EXPECT_ANY_THROW(spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1));
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestRawFileWithUnexistingFile)
{
    std::string stdMessage = R"({"type":"raw","offset":1234,"paths":["unexisting.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Unable to open input file: unexisting.json");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestRawFileWithInvalidLine)
{
    std::string stdMessage = R"({"type":"raw","offset":1234,"paths":["file1.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected parse_error exception";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid line. file: file1.json");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestRawFileLineWithNoName)
{
    std::string stdMessage = R"({"type":"raw","offset":1234,"paths":["file2.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Invalid line. file: file2.json");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestRawFileWithDataAndException)
{
    std::string stdMessage = R"({"type":"raw","offset":1234,"paths":["file4.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper)
    {
        throw std::runtime_error {"Error"};
    };
    auto testingLambda2 = []() {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    try
    {
        auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
        auto spDatabaseFeedManager {
            std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                                  TrampolinePolicyManager,
                                                  TrampolineContentRegister,
                                                  RouterSubscriber,
                                                  MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

        spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
        FAIL() << "Expected std::runtime_error";
    }
    catch (const std::runtime_error& e)
    {
        EXPECT_STREQ(e.what(), "Error");
    }
    catch (const std::exception& e)
    {
        FAIL() << "Expect another exception, throw message: " << e.what();
    }
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, TestRawFileWithDataSuccess)
{
    std::string stdMessage = R"({"type":"raw","offset":1234,"paths":["file4.json"]})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());

    auto testingLambda1 = [](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper) {
    };
    auto testingLambda2 = []() {
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    EXPECT_CALL(MockUnixSocketRequest::instance(), put(_, _, _, _)).Times(1);

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              RouterSubscriber,
                                              MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

    EXPECT_NO_THROW(spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1));
}

TEST_F(DatabaseFeedManagerMessageProcessorTest, DISABLED_TestProcessingStop)
{
    std::string stdMessage = R"({"paths":["file5.json"], "type" : "offsets", "offset" : 1234})";
    std::vector<char> message = std::vector<char>(stdMessage.begin(), stdMessage.end());
    int totalElements {50};
    int waitTimePerElement {10};

    auto fileData = R"({"data": []})"_json;
    for (auto i = 0; i < totalElements; i++)
    {
        fileData["data"].push_back("element" + std::to_string(i));
    }

    {
        std::ofstream file5 {"file5.json"};
        file5 << fileData.dump();
    }
    int counter {0};

    auto testingLambda1 = [&](const nlohmann::json& obj, Utils::IRocksDBWrapper* dbWrapper)
    {
        ++counter;
        std::this_thread::sleep_for(std::chrono::milliseconds(waitTimePerElement));
    };
    std::atomic<bool> shouldStop {false};
    std::shared_mutex mutex;

    auto spIndexerConnectorTramp = std::make_shared<TrampolineIndexerConnector>();
    auto spDatabaseFeedManager {
        std::make_shared<TDatabaseFeedManager<TrampolineIndexerConnector,
                                              TrampolinePolicyManager,
                                              TrampolineContentRegister,
                                              RouterSubscriber,
                                              MockUnixSocketRequest>>(spIndexerConnectorTramp, shouldStop, mutex)};

    auto processingThread =
        std::thread {[&]()
                     {
                         spDatabaseFeedManager->processMessage(message, "topicName", testingLambda1);
                     }};

    std::this_thread::sleep_for(std::chrono::milliseconds(static_cast<int>(waitTimePerElement * totalElements * 0.5)));
    shouldStop.store(true);

    if (processingThread.joinable())
    {
        processingThread.join();
    }

    std::remove("file5.json");

    EXPECT_LT(counter, totalElements);
}
