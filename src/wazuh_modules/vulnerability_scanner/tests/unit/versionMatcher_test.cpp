/*
 * Wazuh databaseFeedManager
 * Copyright (C) 2015, Wazuh Inc.
 * November 2, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */
#include "versionMatcher_test.hpp"

using ::testing::_;
using ::testing::Return;

void VersionMatcherTest::SetUp() {};

void VersionMatcherTest::TearDown() {};

TEST_F(VersionMatcherTest, compareCalVer_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.11.02.1", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("23.11.02.1", "23.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.02", "2023.11.02", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11", "2023.11", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023", "2023", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareCalVer_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.11.02.0", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("23.11.02.0", "23.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.01", "2023.11.02", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.10", "2023.11", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2022", "2023", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareCalVer_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.11.02.2", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("23.11.02.2", "23.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.03", "2023.11.02", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.12", "2023.11", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2024", "2023", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareCalVer_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.13.02.1", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2023.12.32.1", "2023.11.02.1", VersionObjectType::CalVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, comparePEP440_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev456", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev456", "2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345", "2.0b2.post345", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0", "2.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.3.0.0.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3.0.0.0", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, comparePEP440_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev455", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev455", "1!2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev455", "2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345", "2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post344", "2.0b2.post345", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0b2.post344", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b1", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0a2", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0a2", "2.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0", "2.1", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0.1.2.2", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.2", "2.0.1.2.3.0.0.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.2.0.0.0", "2.0.1.2.3", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, comparePEP440_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev457", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1!2.0b2.post345.dev455", "2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "2.0b2.post345.dev456", "2.0b2.post345.dev455", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345.dev455", "2.0b2.post345", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0b2.post345", "2.0b2.post344", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2.post344", "2.0b2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0b1", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0b2", "2.0a2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0", "2.0a2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.1", "2.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3.0.0.0", "2.0.1.2.2", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.0.1.2.3", "2.0.1.2.2.0.0.0", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, comparePEP440_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("A.B.C", "1!2.0b2.post345.dev456", VersionObjectType::PEP440)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareMajorMinor_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-2", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareMajorMinor_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.1", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.1", "2.1", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-1", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-1", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareMajorMinor_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.3", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2.2", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-3", "1-2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1-3", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareMajorMinor_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "1.2", VersionObjectType::MajorMinor)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareSemVer_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta+001", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta+001", "1.2.3-beta", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3+001", "1.2.3+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3+001", "1.2.3", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareSemVer_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "2.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "1.3.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.2-beta+001", "1.2.3-beta", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-alfa+001", "1.2.3+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-alfa+001", "1.2.3-beta", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.2+001", "1.2.3+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.2+001", "1.2.3", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareSemVer_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.4-beta+001", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.3.2-beta+001", "1.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("2.2.2-beta+001", "1.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta", "1.2.2-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("1.2.3-beta", "1.2.3-alfa+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3+001", "1.2.2+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3", "1.2.2+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareSemVer_ErrorInvalidVersion)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "1.2.3-beta+001", VersionObjectType::SemVer)));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkCalVer)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2023.11.02.1", "2023.11.02.1")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkPEP440)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1!2.0b2.post345.dev456", "1!2.0b2.post345.dev456")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkMajorMinor)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2", "1.2")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_OkSemVer)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1.2.3-beta+001", "1.2.3-beta+001")));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareUnspecified_ErrorInvalidFormat)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "2023.11.02.1")));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareUnspecified_ErrorDifferentFormats)
{
    EXPECT_EQ(VersionMatcher::compare("2023.11.02.1", "1!2.0b2.post345.dev456"), INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareUnexistingVersionObjectType)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("A.B.C", "A.B.C", static_cast<VersionObjectType>(1000))));
    EXPECT_EQ(compareResult, INVALID_VERSION_OBJECT_TYPE);
}

TEST_F(VersionMatcherTest, compareDpkgVer_OkEqual)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1:5.15.8-2ubuntu2.0", "1:5.15.8-2ubuntu2.0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("5.15.8-2", "5.15.8-2", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("2:5.15.8-2", "2:5.15.8-2", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("5.15.16-0+deb10u1", "5.15.16-0+deb10u1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("7.3.0+dfsg-1", "7.3.0+dfsg-1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareDpkgVer_OkLess)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1:4.15.8-2ubuntu2.0", "1:5.15.8-2ubuntu2.0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("5.15.8-1", "5.15.8-2", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("1:5.15.8-2", "2:5.15.8-2", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("5.14.16-0+deb10u1", "5.15.16-0+deb10u1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("7.2.0+dfsg-1", "7.3.0+dfsg-1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, -1);
}

TEST_F(VersionMatcherTest, compareDpkgVer_OkGreater)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare(
                         "1:6.15.8-2ubuntu2.0", "1:5.15.8-2ubuntu2.0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("5.15.8-3", "5.15.8-2", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("3:5.15.8-2", "2:5.15.8-2", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW(
        (compareResult = VersionMatcher::compare("5.16.16-0+deb10u1", "5.15.16-0+deb10u1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("7.3.1+dfsg-1", "7.3.0+dfsg-1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 1);
}

TEST_F(VersionMatcherTest, compareDpkgVer_ErrorInvalidVersion)
{
    EXPECT_NO_THROW(VersionMatcher::compare("A.B.C", "2023.11.02-1", VersionObjectType::DPKG));
    EXPECT_NO_THROW(VersionMatcher::compare("0.9.8?", "0.9.8?", VersionObjectType::DPKG));
    EXPECT_NO_THROW(
        VersionMatcher::compare("2.9.4+dfsg1-3.1, 2.9.5", "2.9.4+dfsg1-3.1, 2.9.5", VersionObjectType::DPKG));
}

TEST_F(VersionMatcherTest, compareDpkgVer_dpkgLib)
{
    int compareResult;
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("0:1.1-1", "0:1.1-1", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("0:1.1-0", "0:2.1-0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, -1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("0:2.1-0", "0:1.1-0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 1);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("0:1.0-0", "0:1.0-0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
    EXPECT_NO_THROW((compareResult = VersionMatcher::compare("0:0.0-0", "0:0.0-0", VersionObjectType::DPKG)));
    EXPECT_EQ(compareResult, 0);
}

TEST_F(VersionMatcherTest, compareRpmVer_rmpLib)
{
    EXPECT_EQ(VersionMatcher::compare("1.0", "1.0", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("1.0", "2.0", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("2.0", "1.0", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("2.0.1", "2.0.1", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("2.0", "2.0.1", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("2.0.1", "2.0", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("2.0.1a", "2.0.1a", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("2.0.1a", "2.0.1", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("2.0.1", "2.0.1a", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("5.5p1", "5.5p1", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("5.5p1", "5.5p2", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("5.5p2", "5.5p1", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("5.5p10", "5.5p10", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("5.5p1", "5.5p10", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("5.5p10", "5.5p1", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("10xyz", "10.1xyz", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("10.1xyz", "10xyz", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("xyz10", "xyz10", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("xyz10", "xyz10.1", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("xyz10.1", "xyz10", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("xyz.4", "xyz.4", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("xyz.4", "8", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("8", "xyz.4", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("xyz.4", "2", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("2", "xyz.4", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("5.5p2", "5.6p1", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("5.6p1", "5.5p2", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("5.6p1", "6.5p1", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("6.5p1", "5.6p1", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("6.0.rc1", "6.0", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("6.0", "6.0.rc1", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("10b2", "10a1", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("10a2", "10b2", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("1.0aa", "1.0aa", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("1.0a", "1.0aa", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("1.0aa", "1.0a", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("10.0001", "10.0001", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("10.0001", "10.1", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("10.1", "10.0001", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("10.0001", "10.0039", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("10.0039", "10.0001", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("4.999.9", "5.0", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("5.0", "4.999.9", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("20101121", "20101121", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("20101121", "20101122", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("20101122", "20101121", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("2_0", "2_0", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("2.0", "2_0", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("2_0", "2.0", VersionObjectType::RPM), 0);
}

TEST_F(VersionMatcherTest, compareRpmVer_rmpPackages)
{
    EXPECT_EQ(VersionMatcher::compare(
                  "4.2.5_02_3.0.101_0.46-0.7.9.i586", "4.2.5_02_3.0.101_0.46-0.7.9.i586", VersionObjectType::RPM),
              0); // Suse
    EXPECT_EQ(VersionMatcher::compare("4.1.0-18.el7_1.3.x86_64", "4.1.0-18.el7_1.3.x86_64", VersionObjectType::RPM),
              0); // Redhat
    EXPECT_EQ(VersionMatcher::compare("1.0.1-10.module_el8.5.0+150+5f0dbea0.alma.ppc64le",
                                      "1.0.1-10.module_el8.5.0+150+5f0dbea0.alma.ppc64le",
                                      VersionObjectType::RPM),
              0);                                                                                           // Alma
    EXPECT_EQ(VersionMatcher::compare("2.2.20-2.el8", "2.2.20-2.el8.aarch64", VersionObjectType::RPM), -1); // CentOS
}

TEST_F(VersionMatcherTest, compareAmznLinux_casesEqual)
{
    EXPECT_EQ(VersionMatcher::compare("1:4.8.0-2.amzn2023.0.2", "1:4.8.0-2.amzn2023.0.2", VersionObjectType::AMZN), 0);
    EXPECT_EQ(VersionMatcher::compare("5-4.amzn2023.0.5", "5-4.amzn2023.0.5", VersionObjectType::AMZN), 0);
    EXPECT_EQ(VersionMatcher::compare("3.14-5.amzn2023.0.3", "3.14-5.amzn2023.0.3", VersionObjectType::RPM), 0);
    EXPECT_EQ(VersionMatcher::compare("1:2.0.5-12.amzn2023.0.2", "1:2.0.5-12.amzn2023.0.2", VersionObjectType::AMZN),
              0);
    EXPECT_EQ(VersionMatcher::compare("2.37.4-1.amzn2023.0.3", "2.37.4-1.amzn2023.0.3", VersionObjectType::AMZN), 0);
    EXPECT_EQ(VersionMatcher::compare("2:9.0.2120-1.amzn2023", "2:9.0.2120-1.amzn2023", VersionObjectType::AMZN), 0);
    EXPECT_EQ(VersionMatcher::compare("2.21-26.amzn2023.0.2", "2.21-26.amzn2023.0.2", VersionObjectType::AMZN), 0);
}

TEST_F(VersionMatcherTest, compareAmznLinux_casesLess)
{
    EXPECT_EQ(VersionMatcher::compare("1:4.8.0-2.amzn2023.0.2", "2:4.8.0-2.amzn2023.0.2", VersionObjectType::AMZN), -1);
    EXPECT_EQ(VersionMatcher::compare("5-4.amzn2023.0.5", "6-4.amzn2023.0.5", VersionObjectType::AMZN), -1);
    EXPECT_EQ(VersionMatcher::compare("3.14-5.amzn2023.0.3", "3.15-5.amzn2023.0.3", VersionObjectType::RPM), -1);
    EXPECT_EQ(VersionMatcher::compare("1:2.0.5-12.amzn2023.0.2", "1:2.0.6-12.amzn2023.0.2", VersionObjectType::AMZN),
              -1);
    EXPECT_EQ(VersionMatcher::compare("2.37.4-1.amzn2023.0.3", "2.37.4-2.amzn2023.0.3", VersionObjectType::AMZN), -1);
    EXPECT_EQ(VersionMatcher::compare("2:9.0.2120-1.amzn2023", "2:9.0.2120-2.amzn2023", VersionObjectType::AMZN), -1);
    EXPECT_EQ(VersionMatcher::compare("2.21-26.amzn2023.0.2", "2.22-26.amzn2023.0.2", VersionObjectType::AMZN), -1);
}

TEST_F(VersionMatcherTest, compareAmznLinux_casesGretter)
{
    EXPECT_EQ(VersionMatcher::compare("2:4.8.0-2.amzn2023.0.2", "1:4.8.0-2.amzn2023.0.2", VersionObjectType::AMZN), 1);
    EXPECT_EQ(VersionMatcher::compare("6-4.amzn2023.0.5", "5-4.amzn2023.0.5", VersionObjectType::AMZN), 1);
    EXPECT_EQ(VersionMatcher::compare("3.15-5.amzn2023.0.3", "3.14-5.amzn2023.0.3", VersionObjectType::RPM), 1);
    EXPECT_EQ(VersionMatcher::compare("1:2.0.5-13.amzn2023.0.2", "1:2.0.5-12.amzn2023.0.2", VersionObjectType::AMZN),
              1);
    EXPECT_EQ(VersionMatcher::compare("3.37.4-1.amzn2023.0.3", "2.37.4-1.amzn2023.0.3", VersionObjectType::AMZN), 1);
    EXPECT_EQ(VersionMatcher::compare("2:9.1.2120-1.amzn2023", "2:9.0.2120-1.amzn2023", VersionObjectType::AMZN), 1);
    EXPECT_EQ(VersionMatcher::compare("2.21-29.amzn2023.0.2", "2.21-26.amzn2023.0.2", VersionObjectType::AMZN), 1);
}

TEST_F(VersionMatcherTest, compareAmznLinux_casesRealScan)
{
    EXPECT_EQ(
        VersionMatcher::compare("1.15.1-6.amzn2023.0.3", "gpgme-1.4.3-5.15.amzn1.x86_64.rpm", VersionObjectType::AMZN),
        1);
    EXPECT_EQ(VersionMatcher::compare(
                  "1.57.0-1.amzn2023.0.1", "libnghttp2-1.41.0-1.amzn2.0.4.aarch64.rpm", VersionObjectType::AMZN),
              -1);
    EXPECT_EQ(VersionMatcher::compare(
                  "5.4.4-3.amzn2023.0.2", "lua-libs-5.4.4-3.amzn2022.x86_64.rpm", VersionObjectType::AMZN),
              0);
}
