#ifndef __SEND_REPORT_HPP
#define __SEND_REPORT_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "socketClient.hpp"
#include "vulnerabilityScanner.hpp"

const std::string LOCALFILE_MQ {"1"};
extern int SOCKET_WAIT;

/**
 * @brief Class in charge to send formatted report messages.
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext>
class TSendReport final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::shared_ptr<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>> m_reportSocketClient;

public:
    // LCOV_EXCL_START
    /**
     * @brief Construct a new Send Report object
     *
     * @param reportSocketClient Socket client instance.
     */
    explicit TSendReport(
        std::shared_ptr<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>> reportSocketClient)
        : m_reportSocketClient(std::move(reportSocketClient))
    {
    }
    // LCOV_EXCL_STOP

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<TScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        for (const auto& [key, value] : data->m_alerts)
        {
            try
            {
                std::ostringstream oss;

                std::string agentId = std::string(data->agentId());
                std::string packageName;
                if (data->getType() != ScannerType::IntegrityClear)
                {
                    packageName = std::string(data->packageName());
                }

                // 1:[001] (agent_name) ip->location:
                oss << LOCALFILE_MQ << ":"
                    << "[" << agentId << "] (" << std::string(data->agentName()) << ") " << std::string(data->agentIp())
                    << "->"
                    << "vulnerability-detector"
                    << ":"
                    // Vulnerability report.
                    << value.dump().c_str();

                const std::string message = oss.str();
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Vulnerability %s report for agent ID %s, package: %s, cve: %s",
                          data->getType() == ScannerType::PackageInsert   ? "detected"
                          : data->getType() == ScannerType::PackageDelete ? "solved"
                                                                          : "clear",
                          agentId.c_str(),
                          data->getType() != ScannerType::IntegrityClear ? packageName.c_str() : "all",
                          data->getType() != ScannerType::IntegrityClear ? key.c_str() : "all");

                m_reportSocketClient->send(message.c_str(), message.size());

                // TODO: This should be in a separate thread to avoid delaying the process chain.
                std::this_thread::sleep_for(std::chrono::microseconds(SOCKET_WAIT));
            }
            catch (...)
            {
                logWarn(WM_VULNSCAN_LOGTAG, "Couldn't send vulnerability JSON report for %s:", key.c_str());
            }
        }

        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using SendReport = TSendReport<>;

#endif // __SEND_REPORT_HPP
