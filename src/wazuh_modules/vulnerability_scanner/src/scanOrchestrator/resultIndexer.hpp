/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Jun 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _RESULT_INDEXER_HPP
#define _RESULT_INDEXER_HPP

#include "../policyManager/policyManager.hpp"
#include "chainOfResponsability.hpp"
#include "indexerConnector.hpp"
#include "scanContext.hpp"

/**
 * @brief ResultIndexer class.
 *
 */
class ResultIndexer final : public AbstractHandler<std::shared_ptr<ScanContext>>
{
private:
    std::shared_ptr<IndexerConnector> m_indexerConnector;

public:
    // LCOV_EXCL_START
    /**
     * @brief ResultIndexer constructor.
     *
     * @param indexerConnector Indexer connector.
     */
    explicit ResultIndexer(std::shared_ptr<IndexerConnector> indexerConnector)
        : m_indexerConnector(std::move(indexerConnector))
    {
    }

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<ScanContext> handleRequest(std::shared_ptr<ScanContext> data) override
    {
        if (m_indexerConnector != nullptr)
        {
            for (const auto& [key, value] : data->m_elements)
            {
                logDebug2(WM_VULNSCAN_LOGTAG, "Processing and publish key: %s", key.c_str());
                m_indexerConnector->publish(value.dump());
            }
        }
        return AbstractHandler<std::shared_ptr<ScanContext>>::handleRequest(std::move(data));
    }
    // LCOV_EXCL_STOP
};

#endif // _RESULT_INDEXER_HPP
