/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _PACKAGE_SCANNER_HPP
#define _PACKAGE_SCANNER_HPP

#include "chainOfResponsability.hpp"
#include "databaseFeedManager.hpp"
#include "scanContext.hpp"
#include "versionMatcher/versionMatcher.hpp"
#include <iostream>

/**
 * @brief PackageScanner class.
 *
 */
template<typename TDatabaseFeedManager = DatabaseFeedManager, typename TScanContext = ScanContext>
class TPackageScanner final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::shared_ptr<TDatabaseFeedManager> m_databaseFeedManager;
    std::unordered_map<std::string_view, VersionObjectType> m_mapVendors {{"deb", VersionObjectType::DPKG},
                                                                          {"rpm", VersionObjectType::RPM}};

public:
    // LCOV_EXCL_START
    /**
     * @brief PackageScanner constructor.
     *
     * @param databaseFeedManager Database feed manager.
     */
    explicit TPackageScanner(std::shared_ptr<TDatabaseFeedManager>& databaseFeedManager)
        : m_databaseFeedManager(databaseFeedManager)
    {
    }
    // LCOV_EXCL_STOP
    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<TScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        const std::string packageName {Utils::toLowerCase(std::string(data->packageName()))};

        logDebug1(WM_VULNSCAN_LOGTAG,
                  "Initiating a vulnerability scan for package '%s' on Agent '%s' (ID: '%s', Version: '%s').",
                  packageName.c_str(),
                  data->agentName().data(),
                  data->agentId().data(),
                  data->agentVersion().data());

        auto vulnerabilityScan =
            [&](const std::string& cnaName, const NSVulnerabilityScanner::ScanVulnerabilityCandidate& callbackData)
        {
            for (const auto& version : *callbackData.versions())
            {
                const std::string packageVersion {data->packageVersion()};
                std::string versionString {version->version() ? version->version()->str() : ""};
                std::string versionStringLessThan {version->lessThan() ? version->lessThan()->str() : ""};
                std::string versionStringLessThanOrEqual {version->lessThanOrEqual() ? version->lessThanOrEqual()->str()
                                                                                     : ""};
                VersionObjectType objectType = VersionObjectType::Unspecified;
                const auto it = m_mapVendors.find(data->packageFormat());
                if (it != m_mapVendors.end())
                {
                    objectType = it->second;
                }

                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Scanning package - '%s' (Installed Version: %s, Security Vulnerability: %s). Identified "
                          "vulnerability: "
                          "Version: %s. Required Version Threshold: %s. Required Version Threshold (or Equal): %s.",
                          packageName.c_str(),
                          packageVersion.c_str(),
                          callbackData.cveId()->str().c_str(),
                          versionString.c_str(),
                          versionStringLessThan.c_str(),
                          versionStringLessThanOrEqual.c_str());

                if (versionStringLessThan.empty() && versionStringLessThanOrEqual.empty())
                {
                    if (VersionMatcher::compare(packageVersion, versionString, objectType) == 0)
                    {
                        if (version->status() == NSVulnerabilityScanner::Status::Status_affected)
                        {
                            logInfo(WM_VULNSCAN_LOGTAG,
                                    "Match found, the package '%s', is vulnerable to '%s'. Current version: '%s' is "
                                    "equal to '%s'. - Agent '%s' (ID: '%s', Version: '%s').",
                                    packageName.c_str(),
                                    callbackData.cveId()->str().c_str(),
                                    packageVersion.c_str(),
                                    versionString.c_str(),
                                    data->agentName().data(),
                                    data->agentId().data(),
                                    data->agentVersion().data());

                            data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                            data->m_alerts[callbackData.cveId()->str()]["vulnerability"]["package"]["condition"] =
                                "Package equal to " + versionString;

                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    if ((versionString.compare("0") == 0 ||
                         VersionMatcher::compare(packageVersion, versionString, objectType) >= 0))
                    {
                        if (((!versionStringLessThan.empty() && versionStringLessThan.compare("*") != 0 &&
                              VersionMatcher::compare(packageVersion, versionStringLessThan, objectType) < 0) ||
                             (!versionStringLessThanOrEqual.empty() &&
                              VersionMatcher::compare(packageVersion, versionStringLessThanOrEqual, objectType) <= 0)))
                        {
                            if (version->status() == NSVulnerabilityScanner::Status::Status_affected)
                            {
                                logInfo(WM_VULNSCAN_LOGTAG,
                                        "Match found, the package '%s', is vulnerable to '%s'. Current version: "
                                        "'%s' ("
                                        "less than '%s' or equal to '%s'). - Agent '%s' (ID: '%s', Version: '%s').",
                                        packageName.c_str(),
                                        callbackData.cveId()->str().c_str(),
                                        packageVersion.c_str(),
                                        versionStringLessThan.c_str(),
                                        versionStringLessThanOrEqual.c_str(),
                                        data->agentName().data(),
                                        data->agentId().data(),
                                        data->agentVersion().data());

                                data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                                data->m_alerts[callbackData.cveId()->str()]["vulnerability"]["package"]["condition"] =
                                    versionStringLessThan.empty()
                                        ? "Package less than or equal to " + versionStringLessThanOrEqual
                                        : "Package less than " + versionStringLessThan;

                                return true;
                            }
                            else
                            {
                                logDebug2(WM_VULNSCAN_LOGTAG,
                                          "No match due to default status for Package: %s, Version: %s while scanning "
                                          "for Vulnerability: %s, "
                                          "Installed Version: %s, Required Version Threshold: %s, Required Version "
                                          "Threshold (or Equal): %s",
                                          packageName.c_str(),
                                          packageVersion.c_str(),
                                          callbackData.cveId()->str().c_str(),
                                          versionString.c_str(),
                                          versionStringLessThan.c_str(),
                                          versionStringLessThanOrEqual.c_str());

                                return false;
                            }
                        }
                    }
                }
            }
            const auto defaultStatus {callbackData.defaultStatus()};
            if (defaultStatus == NSVulnerabilityScanner::Status::Status_affected)
            {
                logDebug1(WM_VULNSCAN_LOGTAG,
                          "Match found for Package: %s for vulnerability: %s due to default status.",
                          packageName.c_str(),
                          callbackData.cveId()->str().c_str());

                data->m_elements[callbackData.cveId()->str()] = nlohmann::json::object();
                data->m_alerts[callbackData.cveId()->str()]["vulnerability"]["package"]["condition"] =
                    "Package default status";

                return true;
            }
            else
            {
                return false;
            }
        };

        const auto cnaName {m_databaseFeedManager->getCnaName(data->packageVendor())};
        logDebug1(WM_VULNSCAN_LOGTAG,
                  "Initiating a vulnerability scan for package '%s' with CVE Numbering Authorities (CNA) '%s' on Agent "
                  "'%s' (ID: '%s', Version: '%s').",
                  packageName.c_str(),
                  cnaName.c_str(),
                  data->agentName().data(),
                  data->agentId().data(),
                  data->agentVersion().data());

        try
        {
            m_databaseFeedManager->getVulnerabilitiesCandidates(cnaName, packageName, vulnerabilityScan);
        }
        catch (const std::exception& e)
        {
            logWarn(WM_VULNSCAN_LOGTAG,
                    "Failed to scan package: '%s', CVE Numbering Authorities (CNA): '%s', Error: '%s'",
                    packageName.c_str(),
                    cnaName.c_str(),
                    e.what());
        }

        // Vulnerability scan ended for agent and package...

        logDebug1(WM_VULNSCAN_LOGTAG,
                  "Vulnerability scan for package '%s' on Agent '%s' has completed.",
                  packageName.c_str(),
                  data->agentId().data());

        if (data->m_elements.empty())
        {
            return nullptr;
        }
        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using PackageScanner = TPackageScanner<>;

#endif // _PACKAGE_SCANNER_HPP
