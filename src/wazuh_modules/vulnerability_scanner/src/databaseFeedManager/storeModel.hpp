/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * May 1, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _STORE_MODEL_HPP
#define _STORE_MODEL_HPP

#include "chainOfResponsability.hpp"
#include "eventContext.hpp"
#include "storeRemediationsModel.hpp"
#include "updateCVECandidates.hpp"
#include "updateCVEDescription.hpp"
/**
 * @brief StoreModel class.
 *
 */
class StoreModel final : public AbstractHandler<std::shared_ptr<EventContext>>
{
public:
    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<ScanContext> Abstract handler.
     */
    std::shared_ptr<EventContext> handleRequest(std::shared_ptr<EventContext> data) override
    {
        if (!data->cve5Buffer.data())
        {
            throw std::runtime_error("CVE5 buffer is empty");
        }
        auto cve5Entry = cve_v5::GetEntry(data->cve5Buffer.data());
        if (cve5Entry->cveMetadata())
        {
            auto cveMetadata = cve5Entry->cveMetadata();
            if (cveMetadata->state() && cveMetadata->state()->str().compare("REJECTED") != 0)
            {
                StoreRemediationsModel::updateRemediation(cve5Entry, data->feedDatabase);
                UpdateCVECandidates::storeVulnerabilityCandidate(cve5Entry, data->feedDatabase);
                UpdateCVEDescription::storeVulnerabilityDescription(cve5Entry, data->feedDatabase);
            }
        }

        return AbstractHandler<std::shared_ptr<EventContext>>::handleRequest(std::move(data));
    }
};

#endif // _STORE_MODEL_HPP
